From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vansencool <vansencool@gmail.com>
Date: Wed, 22 Jan 2025 01:00:25 +0530
Subject: [PATCH] Remove logging loaded plugin libraries


diff --git a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
index 5acd7cd09e9bdc26de443d166b193e163aae0188..691c8ddba2ee6b9cad744219f43927dc18a63c05 100644
--- a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
@@ -1,15 +1,6 @@
 // CHECKSTYLE:OFF
 package org.bukkit.plugin.java;
 
-import java.io.File;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.net.URLClassLoader;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.eclipse.aether.DefaultRepositorySystemSession;
@@ -36,6 +27,15 @@ import org.eclipse.aether.transport.http.HttpTransporterFactory;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.File;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 // Paper start
 @org.jetbrains.annotations.ApiStatus.Internal
 public class LibraryLoader
@@ -49,34 +49,31 @@ public class LibraryLoader
     public static java.util.function.BiFunction<URL[], ClassLoader, URLClassLoader> LIBRARY_LOADER_FACTORY; // Paper - rewrite reflection in libraries
     public static java.util.function.Function<List<java.nio.file.Path>, List<java.nio.file.Path>> REMAPPER; // Paper - remap libraries
 
-    public LibraryLoader(@NotNull Logger logger)
-    {
+    public LibraryLoader(@NotNull Logger logger) {
         this.logger = logger;
 
         DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
-        locator.addService( RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class );
-        locator.addService( TransporterFactory.class, HttpTransporterFactory.class );
+        locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);
+        locator.addService(TransporterFactory.class, HttpTransporterFactory.class);
 
-        this.repository = locator.getService( RepositorySystem.class );
+        this.repository = locator.getService(RepositorySystem.class);
         this.session = MavenRepositorySystemUtils.newSession();
 
         session.setSystemProperties(System.getProperties()); // Paper - paper plugins, backport system properties fix for transitive dependency parsing, see #10116
-        session.setChecksumPolicy( RepositoryPolicy.CHECKSUM_POLICY_FAIL );
-        session.setLocalRepositoryManager( repository.newLocalRepositoryManager( session, new LocalRepository( "libraries" ) ) );
-        session.setTransferListener( new AbstractTransferListener()
-        {
+        session.setChecksumPolicy(RepositoryPolicy.CHECKSUM_POLICY_FAIL);
+        session.setLocalRepositoryManager(repository.newLocalRepositoryManager(session, new LocalRepository("libraries")));
+        session.setTransferListener(new AbstractTransferListener() {
             @Override
-            public void transferStarted(@NotNull TransferEvent event) throws TransferCancelledException
-            {
+            public void transferStarted(@NotNull TransferEvent event) throws TransferCancelledException {
                 if (JavaPluginLoader.logDownloads && !JavaPluginLoader.SuppressLibraryLoaderLogger) // Gale - Purpur - do not log plugin library loads
-                logger.log( Level.INFO, "Downloading {0}", event.getResource().getRepositoryUrl() + event.getResource().getResourceName() );
+                    logger.log(Level.INFO, "Downloading {0}", event.getResource().getRepositoryUrl() + event.getResource().getResourceName());
             }
-        } );
+        });
 
         // SPIGOT-7638: Add system properties,
         // since JdkVersionProfileActivator needs 'java.version' when a profile has the 'jdk' element
         // otherwise it will silently fail and not resolves the dependencies in the affected pom.
-        session.setSystemProperties( System.getProperties() );
+        session.setSystemProperties(System.getProperties());
         session.setReadOnly();
 
         // Leaf start - Configurable maven repos
@@ -95,47 +92,46 @@ public class LibraryLoader
     }
 
     @Nullable
-    public ClassLoader createLoader(@NotNull PluginDescriptionFile desc)
-    {
+    public ClassLoader createLoader(@NotNull PluginDescriptionFile desc) {
         // Paper start - plugin loader api
         return this.createLoader(desc, null);
     }
+
     @Nullable
     public ClassLoader createLoader(@NotNull PluginDescriptionFile desc, java.util.@Nullable List<java.nio.file.Path> paperLibraryPaths) {
-        if ( desc.getLibraries().isEmpty() && paperLibraryPaths == null )
+        if (desc.getLibraries().isEmpty() && paperLibraryPaths == null)
         // Paper end - plugin loader api
         {
             return null;
         }
         if (JavaPluginLoader.logStartLoadLibrariesForPlugin && !JavaPluginLoader.SuppressLibraryLoaderLogger) // Gale - Purpur - do not log plugin library loads
-        logger.log( Level.INFO, "[{0}] Loading {1} libraries... please wait", new Object[]
-        {
-            java.util.Objects.requireNonNullElseGet(desc.getPrefix(), desc::getName), desc.getLibraries().size() // Paper - use configured log prefix
-        } );
+            logger.log(Level.INFO, "[{0}] Loading {1} libraries... please wait", new Object[]
+                    {
+                            java.util.Objects.requireNonNullElseGet(desc.getPrefix(), desc::getName), desc.getLibraries().size() // Paper - use configured log prefix
+                    });
 
         List<Dependency> dependencies = new ArrayList<>();
-        for ( String library : desc.getLibraries() )
-        {
-            Artifact artifact = new DefaultArtifact( library );
-            Dependency dependency = new Dependency( artifact, null );
+        for (String library : desc.getLibraries()) {
+            Artifact artifact = new DefaultArtifact(library);
+            Dependency dependency = new Dependency(artifact, null);
 
-            dependencies.add( dependency );
+            dependencies.add(dependency);
         }
 
         DependencyResult result;
         if (!dependencies.isEmpty()) try // Paper - plugin loader api
         {
-            result = repository.resolveDependencies( session, new DependencyRequest( new CollectRequest( (Dependency) null, dependencies, repositories ), null ) );
-        } catch ( DependencyResolutionException ex )
-        {
-            throw new RuntimeException( "Error resolving libraries", ex );
-        } else result = null; // Paper - plugin loader api
+            result = repository.resolveDependencies(session, new DependencyRequest(new CollectRequest((Dependency) null, dependencies, repositories), null));
+        } catch (DependencyResolutionException ex) {
+            throw new RuntimeException("Error resolving libraries", ex);
+        }
+        else result = null; // Paper - plugin loader api
 
         List<URL> jarFiles = new ArrayList<>();
         List<java.nio.file.Path> jarPaths = new ArrayList<>(); // Paper - remap libraries
         // Paper start - plugin loader api
         if (paperLibraryPaths != null) jarPaths.addAll(paperLibraryPaths);
-        if (result != null) for ( ArtifactResult artifact : result.getArtifactResults() )
+        if (result != null) for (ArtifactResult artifact : result.getArtifactResults())
         // Paper end - plugin loader api
         {
             // Paper start - remap libraries
@@ -149,28 +145,30 @@ public class LibraryLoader
             // Paper end - remap libraries
 
             URL url;
-            try
-            {
+            try {
                 url = file.toURI().toURL();
-            } catch ( MalformedURLException ex )
-            {
-                throw new AssertionError( ex );
+            } catch (MalformedURLException ex) {
+                throw new AssertionError(ex);
             }
 
-            jarFiles.add( url );
+            jarFiles.add(url);
+            // NorsPaper start - Remove logging loaded plugin libraries
+            /*
             if (JavaPluginLoader.logLibraryLoaded && !JavaPluginLoader.SuppressLibraryLoaderLogger) // Gale - Purpur - do not log plugin library loads
-            logger.log( Level.INFO, "[{0}] Loaded library {1}", new Object[]
-            {
-                java.util.Objects.requireNonNullElseGet(desc.getPrefix(), desc::getName), file // Paper - use configured log prefix
-            } );
+                logger.log(Level.INFO, "[{0}] Loaded library {1}", new Object[]
+                        {
+                                java.util.Objects.requireNonNullElseGet(desc.getPrefix(), desc::getName), file // Paper - use configured log prefix
+                        });
+             */
+            // NorsPaper end - Remove logging loaded plugin libraries
         }
 
         // Paper start - rewrite reflection in libraries
         URLClassLoader loader;
         if (LIBRARY_LOADER_FACTORY == null) {
-            loader = new URLClassLoader( jarFiles.toArray( new URL[ jarFiles.size() ] ), getClass().getClassLoader() );
+            loader = new URLClassLoader(jarFiles.toArray(new URL[jarFiles.size()]), getClass().getClassLoader());
         } else {
-            loader = LIBRARY_LOADER_FACTORY.apply(jarFiles.toArray( new URL[ jarFiles.size() ] ), getClass().getClassLoader());
+            loader = LIBRARY_LOADER_FACTORY.apply(jarFiles.toArray(new URL[jarFiles.size()]), getClass().getClassLoader());
         }
         // Paper end - rewrite reflection in libraries
 
