From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vansencool <vansencool@gmail.com>
Date: Wed, 22 Jan 2025 00:58:04 +0530
Subject: [PATCH] Custom Namespaces


diff --git a/src/main/java/io/papermc/paper/command/brigadier/Commands.java b/src/main/java/io/papermc/paper/command/brigadier/Commands.java
index e32559772a39af781d89de101b3f7483a339e317..6b7a548a969f22a43dfedc6b40a6bdce6e84e651 100644
--- a/src/main/java/io/papermc/paper/command/brigadier/Commands.java
+++ b/src/main/java/io/papermc/paper/command/brigadier/Commands.java
@@ -10,14 +10,15 @@ import io.papermc.paper.plugin.bootstrap.PluginBootstrap;
 import io.papermc.paper.plugin.configuration.PluginMeta;
 import io.papermc.paper.plugin.lifecycle.event.LifecycleEventManager;
 import io.papermc.paper.plugin.lifecycle.event.registrar.Registrar;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Set;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Unmodifiable;
 import org.jspecify.annotations.NullMarked;
 import org.jspecify.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Set;
+
 /**
  * The registrar for custom commands. Supports Brigadier commands and {@link BasicCommand}.
  * <p>
@@ -149,7 +150,7 @@ public interface Commands extends Registrar {
      *   <li>The main command/namespaced label will override already existing commands</li>
      * </ul>
      *
-     * @param node the built literal command node
+     * @param node    the built literal command node
      * @param aliases a collection of aliases to register the literal node's command to
      * @return successfully registered root command labels (including aliases and namespaced variants)
      */
@@ -171,7 +172,29 @@ public interface Commands extends Registrar {
      * @param aliases     a collection of aliases to register the literal node's command to
      * @return successfully registered root command labels (including aliases and namespaced variants)
      */
-    @Unmodifiable Set<String> register(LiteralCommandNode<CommandSourceStack> node, @Nullable String description, Collection<String> aliases);
+    @Unmodifiable
+    Set<String> register(LiteralCommandNode<CommandSourceStack> node, @Nullable String description, Collection<String> aliases);
+
+    // NorsPaper start - Better Commands API
+
+    /**
+     * Registers a command for a plugin.
+     *
+     * <p>Commands have certain overriding behavior:
+     * <ul>
+     *   <li>Aliases will not override already existing commands (excluding namespaced ones)</li>
+     *   <li>The main command/namespaced label will override already existing commands</li>
+     * </ul>
+     *
+     * @param node        the built literal command node
+     * @param description the help description for the root literal node
+     * @param aliases     a collection of aliases to register the literal node's command to
+     * @param namespace   the namespace to register the command under
+     * @return successfully registered root command labels (including aliases and namespaced variants)
+     */
+    @Unmodifiable
+    Set<String> register(LiteralCommandNode<CommandSourceStack> node, @Nullable String description, Collection<String> aliases, String namespace);
+    // NorsPaper end - Better Commands API
 
     /**
      * Registers a command for a plugin.
@@ -188,7 +211,8 @@ public interface Commands extends Registrar {
      * @param aliases     a collection of aliases to register the literal node's command to
      * @return successfully registered root command labels (including aliases and namespaced variants)
      */
-    @Unmodifiable Set<String> register(PluginMeta pluginMeta, LiteralCommandNode<CommandSourceStack> node, @Nullable String description, Collection<String> aliases);
+    @Unmodifiable
+    Set<String> register(PluginMeta pluginMeta, LiteralCommandNode<CommandSourceStack> node, @Nullable String description, Collection<String> aliases);
 
     /**
      * This allows configuring the registration of your command, which is not intended for public use.
@@ -200,12 +224,12 @@ public interface Commands extends Registrar {
      * @param aliases     a collection of aliases to register the literal node's command to
      * @param flags       a collection of registration flags that control registration behaviour.
      * @return successfully registered root command labels (including aliases and namespaced variants)
-     *
      * @apiNote This method is not guaranteed to be stable as it is not intended for public use.
      * See {@link CommandRegistrationFlag} for a more indepth explanation of this method's use-case.
      */
     @ApiStatus.Internal
-    @Unmodifiable Set<String> registerWithFlags(PluginMeta pluginMeta, LiteralCommandNode<CommandSourceStack> node, @Nullable String description, Collection<String> aliases, Set<CommandRegistrationFlag> flags);
+    @Unmodifiable
+    Set<String> registerWithFlags(PluginMeta pluginMeta, LiteralCommandNode<CommandSourceStack> node, @Nullable String description, Collection<String> aliases, Set<CommandRegistrationFlag> flags);
 
     /**
      * Registers a command under the same logic as {@link Commands#register(LiteralCommandNode, String, Collection)}.
@@ -251,7 +275,8 @@ public interface Commands extends Registrar {
      * @param basicCommand the basic command instance to register
      * @return successfully registered root command labels (including aliases and namespaced variants)
      */
-    @Unmodifiable Set<String> register(String label, @Nullable String description, Collection<String> aliases, BasicCommand basicCommand);
+    @Unmodifiable
+    Set<String> register(String label, @Nullable String description, Collection<String> aliases, BasicCommand basicCommand);
 
     /**
      * Registers a command under the same logic as {@link Commands#register(PluginMeta, LiteralCommandNode, String, Collection)}.
@@ -263,5 +288,6 @@ public interface Commands extends Registrar {
      * @param basicCommand the basic command instance to register
      * @return successfully registered root command labels (including aliases and namespaced variants)
      */
-    @Unmodifiable Set<String> register(PluginMeta pluginMeta, String label, @Nullable String description, Collection<String> aliases, BasicCommand basicCommand);
+    @Unmodifiable
+    Set<String> register(PluginMeta pluginMeta, String label, @Nullable String description, Collection<String> aliases, BasicCommand basicCommand);
 }
