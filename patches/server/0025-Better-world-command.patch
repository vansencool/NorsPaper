From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vansencool <vansencool@gmail.com>
Date: Sun, 2 Feb 2025 20:13:08 +0530
Subject: [PATCH] Better world command


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 6b9b3d366343a0bef76036b2b150691787f93db6..0ec2f3ed117240f513f2dd1dca1a1a76b9f6a814 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -3,8 +3,6 @@ package net.minecraft.server;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -13,65 +11,22 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.Lifecycle;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectArraySet;
-import java.awt.image.BufferedImage;
-import java.io.BufferedWriter;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.lang.management.ManagementFactory;
-import java.lang.management.ThreadInfo;
-import java.lang.management.ThreadMXBean;
-import java.net.Proxy;
-import java.nio.file.FileStore;
-import java.nio.file.Files;
-import java.nio.file.LinkOption;
-import java.nio.file.Path;
-import java.security.KeyPair;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.function.BooleanSupplier;
-import java.util.function.Consumer;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import javax.annotation.Nullable;
-import javax.imageio.ImageIO;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.FileUtil;
-import net.minecraft.ReportType;
-import net.minecraft.ReportedException;
-import net.minecraft.SharedConstants;
-import net.minecraft.SystemReport;
-import net.minecraft.Util;
+import joptsimple.OptionSet;
+import net.minecraft.*;
 import net.minecraft.commands.CommandSource;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.HolderGetter;
-import net.minecraft.core.LayeredRegistryAccess;
-import net.minecraft.core.Registry;
-import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.*;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.data.worldgen.features.MiscOverworldFeatures;
 import net.minecraft.gametest.framework.GameTestTicker;
+import net.minecraft.nbt.NbtException;
+import net.minecraft.nbt.ReportedNbtException;
 import net.minecraft.network.chat.ChatDecorator;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
@@ -81,6 +36,14 @@ import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.obfuscate.DontObfuscate;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.bossevents.CustomBossEvents;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.DedicatedServerProperties;
+import net.minecraft.server.level.*;
+import net.minecraft.server.level.progress.ChunkProgressListener;
+import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
+import net.minecraft.server.network.ServerConnectionListener;
+import net.minecraft.server.network.TextFilter;
 import net.minecraft.server.packs.PackType;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.repository.PackRepository;
@@ -92,15 +55,7 @@ import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.ServerOpListEntry;
 import net.minecraft.server.players.UserWhiteList;
-import net.minecraft.util.Crypt;
-import net.minecraft.util.CryptException;
-import net.minecraft.util.ModCheck;
-import net.minecraft.util.Mth;
-import net.minecraft.util.NativeModuleLister;
-import net.minecraft.util.ProgressListener;
-import net.minecraft.util.RandomSource;
-import net.minecraft.util.SignatureValidator;
-import net.minecraft.util.TimeUtil;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.debugchart.RemoteDebugSampleType;
 import net.minecraft.util.debugchart.SampleLogger;
@@ -120,70 +75,53 @@ import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.flag.FeatureFlags;
 import net.minecraft.world.item.alchemy.PotionBrewing;
 import net.minecraft.world.item.crafting.RecipeManager;
-import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.CustomSpawner;
-import net.minecraft.world.level.DataPackConfig;
-import net.minecraft.world.level.ForcedChunksSavedData;
-import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelSettings;
-import net.minecraft.world.level.WorldDataConfiguration;
+import net.minecraft.world.level.*;
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.storage.ChunkIOErrorReporter;
 import net.minecraft.world.level.chunk.storage.RegionStorageInfo;
 import net.minecraft.world.level.dimension.LevelStem;
-import net.minecraft.world.level.levelgen.WorldOptions;
+import net.minecraft.world.level.levelgen.*;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
-import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
-import net.minecraft.world.level.storage.WorldData;
-import org.slf4j.Logger;
-
-// CraftBukkit start
-import com.mojang.serialization.Dynamic;
-import com.mojang.serialization.Lifecycle;
-import java.io.File;
-import java.util.Random;
-// import jline.console.ConsoleReader; // Paper
-import joptsimple.OptionSet;
-import net.minecraft.nbt.NbtException;
-import net.minecraft.nbt.ReportedNbtException;
-import net.minecraft.server.bossevents.CustomBossEvents;
-import net.minecraft.server.dedicated.DedicatedServer;
-import net.minecraft.server.dedicated.DedicatedServerProperties;
-import net.minecraft.server.level.DemoMode;
-import net.minecraft.server.level.PlayerRespawnLogic;
-import net.minecraft.server.level.ServerChunkCache;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.level.ServerPlayerGameMode;
-import net.minecraft.server.level.progress.ChunkProgressListener;
-import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
-import net.minecraft.server.network.ServerConnectionListener;
-import net.minecraft.server.network.TextFilter;
-import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.world.level.levelgen.PatrolSpawner;
-import net.minecraft.world.level.levelgen.PhantomSpawner;
-import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
-import net.minecraft.world.level.storage.CommandStorage;
-import net.minecraft.world.level.storage.DimensionDataStorage;
-import net.minecraft.world.level.storage.LevelData;
-import net.minecraft.world.level.storage.LevelDataAndDimensions;
-import net.minecraft.world.level.storage.LevelResource;
-import net.minecraft.world.level.storage.LevelStorageSource;
-import net.minecraft.world.level.storage.LevelSummary;
-import net.minecraft.world.level.storage.PlayerDataStorage;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-import net.minecraft.world.level.storage.ServerLevelData;
+import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
+import net.minecraft.world.level.storage.*;
 import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import net.vansen.norspaper.worlds.WorldStorage;
 import org.bukkit.Bukkit;
+import org.bukkit.WorldCreator;
 import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.event.server.ServerLoadEvent;
+import org.slf4j.Logger;
+
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.BufferedWriter;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.lang.management.ManagementFactory;
+import java.lang.management.ThreadInfo;
+import java.lang.management.ThreadMXBean;
+import java.net.Proxy;
+import java.nio.file.FileStore;
+import java.nio.file.Files;
+import java.nio.file.LinkOption;
+import java.nio.file.Path;
+import java.security.KeyPair;
+import java.util.*;
+import java.util.Map.Entry;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.BooleanSupplier;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 // CraftBukkit end
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, ChunkIOErrorReporter, CommandSource, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer { // Paper - rewrite chunk system
@@ -739,6 +677,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Paper end - Configurable player collision
 
+        WorldStorage.loadWorlds().stream().filter(string -> new File(string).exists()).filter(string -> new File(string).isDirectory()).forEach(string -> Bukkit.createWorld(WorldCreator.name(string))); // NorsPaper - Better world command
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.spark.registerCommandBeforePlugins(this.server); // Paper - spark
         this.server.spark.enableAfterPlugins(this.server); // Paper - spark
diff --git a/src/main/java/net/vansen/norspaper/commands/WorldCommand.java b/src/main/java/net/vansen/norspaper/commands/WorldCommand.java
index 6491a8565be6823810c8158950995d242b69ba9b..a61ac500e43cc29b11eab0ff82ea552402bdf1e6 100644
--- a/src/main/java/net/vansen/norspaper/commands/WorldCommand.java
+++ b/src/main/java/net/vansen/norspaper/commands/WorldCommand.java
@@ -10,6 +10,7 @@ import net.minecraft.world.entity.Entity;
 import net.vansen.norspaper.config.NorsPaperConfig;
 import net.vansen.norspaper.generators.SingleBiome;
 import net.vansen.norspaper.generators.VoidGenerator;
+import net.vansen.norspaper.worlds.WorldStorage;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.WorldCreator;
@@ -20,6 +21,7 @@ import org.jetbrains.annotations.NotNull;
 
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.stream.Stream;
 
 public class WorldCommand {
 
@@ -68,9 +70,11 @@ public class WorldCommand {
                                                 try {
                                                     Bukkit.createWorld(WorldCreator.name(name)
                                                             .environment(World.Environment.NORMAL));
+                                                    WorldStorage.storeWorld(name);
                                                     context.getSource().getSender().sendRichMessage("<green>World created: '" + name + "'");
                                                 } catch (Exception e) {
                                                     ComponentLogger.logger("WorldCommand").error("Failed to create world", e);
+                                                    context.getSource().getSender().sendRichMessage("<red>Failed to create world: '" + name + "'");
                                                 }
                                             });
                                     return 1;
@@ -80,6 +84,8 @@ public class WorldCommand {
                                             String input = String.join(" ", Arrays.stream(context.getInput().split(" "))
                                                     .skip(3)
                                                     .toArray(String[]::new));
+                                            String currentArg = currentArgOr(input);
+                                            wrapper = wrapper.createOffset(wrapper.getInput().length());
                                             String[] substrings = new String[]{"-type:", "-biome:", "-generator:", "-generatestructures"};
                                             boolean caughtSome = false;
 
@@ -97,13 +103,37 @@ public class WorldCommand {
                                                 }
                                             }
                                             if (caughtSome) return wrapper.buildFuture();
-                                            String currentArg = currentArgOr(input);
                                             String[] suggestions = new String[]{
                                                     "-generatestructures", "-biome:",
                                                     "-generator:vanilla", "-generator:nether", "-generator:end", "-generator:void",
                                                     "-type:flat", "-type:largebiomes", "-type:amplified", "-type:normal"
                                             };
 
+                                            boolean didSomething = false;
+                                            switch (currentArg) {
+                                                case "-type:" -> {
+                                                    suggestions = new String[]{
+                                                            "largebiomes", "amplified", "flat", "normal"
+                                                    };
+                                                    Stream.of("largebiomes", "amplified", "flat", "normal").forEachOrdered(wrapper::suggest);
+                                                    didSomething = true;
+                                                }
+                                                case "-generator:" -> {
+                                                    suggestions = new String[]{
+                                                            "vanilla", "nether", "end", "void"
+                                                    };
+                                                    Stream.of("vanilla", "nether", "end", "void").forEachOrdered(wrapper::suggest);
+                                                    didSomething = true;
+                                                }
+                                                case "-biome:" -> {
+                                                    for (Biome biome : Biome.values()) {
+                                                        wrapper.suggest(biome.name());
+                                                    }
+                                                    didSomething = true;
+                                                }
+                                            }
+
+                                            if (didSomething) return wrapper.buildFuture();
                                             for (String suggestion : suggestions) {
                                                 if (input.contains("generator:") && suggestion.startsWith("-generator:"))
                                                     continue;
@@ -113,19 +143,19 @@ public class WorldCommand {
                                                     continue;
 
                                                 if (currentArg.equals("-type") && suggestion.startsWith("-type:")) {
-                                                    wrapper.suggest(input + suggestion.substring("-type".length()));
+                                                    wrapper.suggest(suggestion.substring("-type".length()));
                                                     continue;
                                                 }
                                                 if (currentArg.equals("-generator") && suggestion.startsWith("-generator:")) {
-                                                    wrapper.suggest(input + suggestion.substring("-generator".length()));
+                                                    wrapper.suggest(suggestion.substring("-generator".length()));
                                                     continue;
                                                 }
                                                 if (currentArg.equals("-biome") && suggestion.startsWith("-biome:")) {
-                                                    wrapper.suggest(input + suggestion.substring("-biome".length()));
+                                                    wrapper.suggest(suggestion.substring("-biome".length()));
                                                     continue;
                                                 }
                                                 if (!input.contains(suggestion)) {
-                                                    wrapper.suggest(input + (input.endsWith(" ") ? "" : " ") + suggestion);
+                                                    wrapper.suggest(suggestion);
                                                 }
                                             }
                                             return wrapper.buildFuture();
@@ -220,9 +250,11 @@ public class WorldCommand {
                                                                 worldCreator.biomeProvider(new SingleBiome(Biome.valueOf(finalBiome.toUpperCase())));
                                                             }
                                                             Bukkit.createWorld(worldCreator);
+                                                            WorldStorage.storeWorld(worldName);
                                                             context.getSource().getSender().sendRichMessage("<#86C1DB>World created: '" + worldName + "'");
                                                         } catch (Exception e) {
                                                             ComponentLogger.logger("WorldCommand").error("Failed to create world", e);
+                                                            context.getSource().getSender().sendRichMessage("<red>Failed to create world: '" + worldName + "', message: " + e.getMessage());
                                                         }
                                                     });
                                                 }
@@ -256,9 +288,11 @@ public class WorldCommand {
                                             .runTask(() -> {
                                                 try {
                                                     Bukkit.unloadWorld(name, false);
+                                                    WorldStorage.deleteWorld(name);
                                                     context.getSource().getSender().sendRichMessage("<green>World deleted: '" + name + "'");
                                                 } catch (Exception e) {
                                                     ComponentLogger.logger("WorldCommand").error("Failed to delete world", e);
+                                                    context.getSource().getSender().sendRichMessage("<red>Failed to delete world: '" + name + "', message: " + e.getMessage());
                                                 }
                                             });
                                     return 1;
@@ -266,7 +300,7 @@ public class WorldCommand {
     }
 
     public static @NotNull String currentArgOr(String inputWithoutStuff) {
-        if (inputWithoutStuff.lastIndexOf(" ") == -1) return "";
-        return inputWithoutStuff.substring(inputWithoutStuff.lastIndexOf(" ") + 1);
+        String[] words = inputWithoutStuff.split(" ");
+        return words[words.length - 1];
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/vansen/norspaper/worlds/WorldStorage.java b/src/main/java/net/vansen/norspaper/worlds/WorldStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..2c049ed9e0b4330487a7ab0c2f351356d7602cdf
--- /dev/null
+++ b/src/main/java/net/vansen/norspaper/worlds/WorldStorage.java
@@ -0,0 +1,63 @@
+package net.vansen.norspaper.worlds;
+
+import net.kyori.adventure.text.logger.slf4j.ComponentLogger;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Scanner;
+
+public class WorldStorage {
+    private static final String WORLD_STORAGE_FILE = "norspaper/worlds.dat";
+
+    public static void storeWorld(String worldName) {
+        try (FileWriter writer = new FileWriter(WORLD_STORAGE_FILE, true)) {
+            writer.write(worldName + "\n");
+        } catch (IOException e) {
+            ComponentLogger.logger("WorldStorage").error("Failed to store world", e);
+        }
+    }
+
+    public static void deleteWorld(String worldName) {
+        File file = new File(WORLD_STORAGE_FILE);
+        List<String> worlds = new ArrayList<>();
+
+        try (Scanner scanner = new Scanner(file)) {
+            while (scanner.hasNextLine()) {
+                String line = scanner.nextLine();
+                if (!line.equals(worldName)) {
+                    worlds.add(line);
+                }
+            }
+        } catch (IOException e) {
+            ComponentLogger.logger("WorldStorage").error("Failed to delete world", e);
+        }
+
+        try (FileWriter writer = new FileWriter(file)) {
+            for (String world : worlds) {
+                writer.write(world + "\n");
+            }
+        } catch (IOException e) {
+            ComponentLogger.logger("WorldStorage").error("Failed to delete world", e);
+        }
+    }
+
+    public static List<String> loadWorlds() {
+        List<String> worlds = new ArrayList<>();
+        if (!new File(WORLD_STORAGE_FILE).exists()) {
+            return worlds;
+        }
+
+        try (Scanner scanner = new Scanner(new File(WORLD_STORAGE_FILE))) {
+            while (scanner.hasNextLine()) {
+                worlds.add(scanner.nextLine());
+            }
+        } catch (IOException e) {
+            ComponentLogger.logger("WorldStorage").error("Failed to load worlds", e);
+        }
+
+        return worlds;
+    }
+}
\ No newline at end of file
