From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vansencool <vansencool@gmail.com>
Date: Tue, 21 Jan 2025 22:14:20 +0530
Subject: [PATCH] Use object array list


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 6d8fb4fe9733bd1e83af7f8c148bdb54fa26a14b..5bba2d22b92274a7222f7123e3380b9cda4cd784 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -10,59 +10,18 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
-import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectArrayList;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
-import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
-import java.io.BufferedWriter;
-import java.io.IOException;
-import java.io.Writer;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.Executor;
-import java.util.function.BooleanSupplier;
-import java.util.function.Function;
-import java.util.function.Predicate;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.*;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportType;
 import net.minecraft.Util;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.core.Holder;
-import net.minecraft.core.HolderSet;
-import net.minecraft.core.SectionPos;
+import net.minecraft.core.*;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockEventPacket;
-import net.minecraft.network.protocol.game.ClientboundDamageEventPacket;
-import net.minecraft.network.protocol.game.ClientboundEntityEventPacket;
-import net.minecraft.network.protocol.game.ClientboundExplodePacket;
-import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket;
-import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundPacket;
-import net.minecraft.network.protocol.game.DebugPackets;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
@@ -72,12 +31,7 @@ import net.minecraft.server.players.SleepStatus;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.TagKey;
-import net.minecraft.util.AbortableIterationConsumer;
-import net.minecraft.util.CsvOutput;
-import net.minecraft.util.Mth;
-import net.minecraft.util.ProgressListener;
-import net.minecraft.util.RandomSource;
-import net.minecraft.util.Unit;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.util.valueproviders.UniformInt;
@@ -85,13 +39,7 @@ import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.RandomSequences;
 import net.minecraft.world.TickRateManager;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.LightningBolt;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobCategory;
-import net.minecraft.world.entity.ReputationEventHandler;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.village.ReputationEventType;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
@@ -109,17 +57,7 @@ import net.minecraft.world.entity.raid.Raids;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.item.alchemy.PotionBrewing;
 import net.minecraft.world.item.crafting.RecipeManager;
-import net.minecraft.world.level.BlockEventData;
-import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.CustomSpawner;
-import net.minecraft.world.level.Explosion;
-import net.minecraft.world.level.ExplosionDamageCalculator;
-import net.minecraft.world.level.ForcedChunksSavedData;
-import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.NaturalSpawner;
-import net.minecraft.world.level.StructureManager;
-import net.minecraft.world.level.WorldGenLevel;
+import net.minecraft.world.level.*;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.block.Block;
@@ -137,12 +75,7 @@ import net.minecraft.world.level.chunk.storage.SimpleRegionStorage;
 import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.entity.EntityPersistentStorage;
-import net.minecraft.world.level.entity.EntityTickList;
-import net.minecraft.world.level.entity.EntityTypeTest;
-import net.minecraft.world.level.entity.LevelCallback;
-import net.minecraft.world.level.entity.LevelEntityGetter;
-import net.minecraft.world.level.entity.PersistentEntitySectionManager;
+import net.minecraft.world.level.entity.*;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventDispatcher;
@@ -169,7 +102,6 @@ import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.LevelTicks;
-import org.slf4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.WeatherType;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -179,6 +111,22 @@ import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.server.MapInitializeEvent;
 import org.bukkit.event.weather.LightningStrikeEvent;
 import org.bukkit.event.world.TimeSkipEvent;
+import org.slf4j.Logger;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.BufferedWriter;
+import java.io.IOException;
+import java.io.Writer;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.concurrent.Executor;
+import java.util.function.BooleanSupplier;
+import java.util.function.Function;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 // CraftBukkit end
 
 public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevelReader { // Paper - rewrite chunk system
@@ -232,6 +180,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     public boolean hasRidableMoveEvent = false; // Purpur
     final List<ServerPlayer> realPlayers; // Leaves - skip
 
+    @Override
     public LevelChunk getChunkIfLoaded(int x, int z) {
         return this.chunkSource.getChunkAtIfLoadedImmediately(x, z); // Paper - Use getChunkIfLoadedImmediately
     }
@@ -297,18 +246,19 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         final Player player = this.getServer().getPlayerList().getPlayer(uuid);
         return player != null && player.level() == this ? player : null;
     }
+
     // Paper end - optimise getPlayerByUUID
     // Paper start - rewrite chunk system
     private boolean markedClosing;
     private final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder viewDistanceHolder = new ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder();
-    private final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader chunkLoader = new ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader((ServerLevel)(Object)this);
+    private final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader chunkLoader = new ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader((ServerLevel) (Object) this);
     private final ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.EntityDataController entityDataController;
     private final ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.PoiDataController poiDataController;
     private final ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.ChunkDataController chunkDataController;
     private final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler chunkTaskScheduler;
     private long lastMidTickFailure;
     private long tickedBlocksOrFluids;
-    private final ca.spottedleaf.moonrise.common.misc.NearbyPlayers nearbyPlayers = new ca.spottedleaf.moonrise.common.misc.NearbyPlayers((ServerLevel)(Object)this);
+    private final ca.spottedleaf.moonrise.common.misc.NearbyPlayers nearbyPlayers = new ca.spottedleaf.moonrise.common.misc.NearbyPlayers((ServerLevel) (Object) this);
     private static final ServerChunkCache.ChunkAndHolder[] EMPTY_CHUNK_AND_HOLDERS = new ServerChunkCache.ChunkAndHolder[0];
     private final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerChunkCache.ChunkAndHolder> loadedChunks = new ca.spottedleaf.moonrise.common.list.ReferenceList<>(EMPTY_CHUNK_AND_HOLDERS);
     private final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerChunkCache.ChunkAndHolder> tickingChunks = new ca.spottedleaf.moonrise.common.list.ReferenceList<>(EMPTY_CHUNK_AND_HOLDERS);
@@ -340,7 +290,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
     @Override
     public final void moonrise$midTickTasks() {
-        ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer)this.server).moonrise$executeMidTickTasks();
+        ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer) this.server).moonrise$executeMidTickTasks();
     }
 
     @Override
@@ -383,11 +333,11 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                                                final ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority priority,
                                                final java.util.function.Consumer<java.util.List<net.minecraft.world.level.chunk.ChunkAccess>> onLoad) {
         this.moonrise$loadChunksAsync(
-            (pos.getX() - radiusBlocks) >> 4,
-            (pos.getX() + radiusBlocks) >> 4,
-            (pos.getZ() - radiusBlocks) >> 4,
-            (pos.getZ() + radiusBlocks) >> 4,
-            priority, onLoad
+                (pos.getX() - radiusBlocks) >> 4,
+                (pos.getX() + radiusBlocks) >> 4,
+                (pos.getZ() - radiusBlocks) >> 4,
+                (pos.getZ() + radiusBlocks) >> 4,
+                priority, onLoad
         );
     }
 
@@ -396,11 +346,11 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                                                final net.minecraft.world.level.chunk.status.ChunkStatus chunkStatus, final ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority priority,
                                                final java.util.function.Consumer<java.util.List<net.minecraft.world.level.chunk.ChunkAccess>> onLoad) {
         this.moonrise$loadChunksAsync(
-            (pos.getX() - radiusBlocks) >> 4,
-            (pos.getX() + radiusBlocks) >> 4,
-            (pos.getZ() - radiusBlocks) >> 4,
-            (pos.getZ() + radiusBlocks) >> 4,
-            chunkStatus, priority, onLoad
+                (pos.getX() - radiusBlocks) >> 4,
+                (pos.getX() + radiusBlocks) >> 4,
+                (pos.getZ() - radiusBlocks) >> 4,
+                (pos.getZ() + radiusBlocks) >> 4,
+                chunkStatus, priority, onLoad
         );
     }
 
@@ -486,6 +436,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     public final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerChunkCache.ChunkAndHolder> moonrise$getEntityTickingChunks() {
         return this.entityTickingChunks;
     }
+
     // Paper end - rewrite chunk system
     // Paper start - lag compensation
     private long lagCompensationTick = net.minecraft.server.MinecraftServer.SERVER_INIT;
@@ -510,7 +461,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         this.convertable = convertable_conversionsession;
         this.uuid = WorldUUID.getUUID(convertable_conversionsession.levelDirectory.path().toFile());
         // CraftBukkit end
-        this.players = Lists.newArrayList();
+        this.players = new ObjectArrayList<>(); // NorsPaper - Use object array list
         this.entityTickList = new EntityTickList();
         // Gale start - Purpur - remove vanilla profiler
         this.blockTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded);
@@ -600,16 +551,16 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         });
         // Paper start - rewrite chunk system
         this.entityDataController = new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.EntityDataController(
-            new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.EntityDataController.EntityRegionFileStorage(
-                new RegionStorageInfo(convertable_conversionsession.getLevelId(), resourcekey, "entities"),
-                convertable_conversionsession.getDimensionPath(resourcekey).resolve("entities"),
-                minecraftserver.forceSynchronousWrites()
-            )
+                new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.EntityDataController.EntityRegionFileStorage(
+                        new RegionStorageInfo(convertable_conversionsession.getLevelId(), resourcekey, "entities"),
+                        convertable_conversionsession.getDimensionPath(resourcekey).resolve("entities"),
+                        minecraftserver.forceSynchronousWrites()
+                )
         );
-        this.poiDataController = new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.PoiDataController((ServerLevel)(Object)this);
-        this.chunkDataController = new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.ChunkDataController((ServerLevel)(Object)this);
-        this.moonrise$setEntityLookup(new ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup((ServerLevel)(Object)this, ((ServerLevel)(Object)this).new EntityCallbacks()));
-        this.chunkTaskScheduler = new ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler((ServerLevel)(Object)this, ca.spottedleaf.moonrise.common.util.MoonriseCommon.WORKER_POOL);
+        this.poiDataController = new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.PoiDataController((ServerLevel) (Object) this);
+        this.chunkDataController = new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.ChunkDataController((ServerLevel) (Object) this);
+        this.moonrise$setEntityLookup(new ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup((ServerLevel) (Object) this, ((ServerLevel) (Object) this).new EntityCallbacks()));
+        this.chunkTaskScheduler = new ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler((ServerLevel) (Object) this, ca.spottedleaf.moonrise.common.util.MoonriseCommon.WORKER_POOL);
         // Paper end - rewrite chunk system
         this.getCraftServer().addWorld(this.getWorld()); // CraftBukkit
         this.realPlayers = Lists.newArrayList(); // Leaves - skip
@@ -623,7 +574,9 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     }
     // Paper end
 
-    /** @deprecated */
+    /**
+     * @deprecated
+     */
     @Deprecated
     @VisibleForTesting
     public void setDragonFight(@Nullable EndDragonFight enderDragonFight) {
@@ -776,8 +729,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                     this.preciseTime += 12000 / (double) incrementTicks;
                     this.setDayTime(this.preciseTime);
                 } else
-                // Purpur end
-                this.setDayTime(this.levelData.getDayTime() + 1L);
+                    // Purpur end
+                    this.setDayTime(this.levelData.getDayTime() + 1L);
             }
 
         }
@@ -789,6 +742,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         this.preciseTime = timeOfDay;
         this.forceTime = false;
     }
+
     public void setDayTime(double i) {
         this.serverLevelData.setDayTime((long) i);
         this.forceTime = true;
@@ -826,7 +780,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     // Paper start - optimise random ticking
     private void optimiseRandomTick(final LevelChunk chunk, final int tickSpeed) {
         final LevelChunkSection[] sections = chunk.getSections();
-        final int minSection = ca.spottedleaf.moonrise.common.util.WorldUtil.getMinSection((ServerLevel)(Object)this);
+        final int minSection = ca.spottedleaf.moonrise.common.util.WorldUtil.getMinSection((ServerLevel) (Object) this);
         final RandomSource random = this.random;
         final boolean tickFluids = false; // Paper - not configurable - MC-224294
 
@@ -861,11 +815,11 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 // do not use a mutable pos, as some random tick implementations store the input without calling immutable()!
                 final BlockPos pos = new BlockPos((location & 15) | offsetX, ((location >>> (4 + 4)) & 15) | offsetY, ((location >>> 4) & 15) | offsetZ); // Moonrise - block counting optimisations
 
-                state.randomTick((ServerLevel)(Object)this, pos, random);
+                state.randomTick((ServerLevel) (Object) this, pos, random);
                 if (tickFluids) {
                     final FluidState fluidState = state.getFluidState();
                     if (fluidState.isRandomlyTicking()) {
-                        fluidState.randomTick((ServerLevel)(Object)this, pos, random);
+                        fluidState.randomTick((ServerLevel) (Object) this, pos, random);
                     }
                 }
             }
@@ -875,7 +829,11 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     }
     // Paper end - optimise random ticking
 
-    private int currentIceAndSnowTick = 0; protected void resetIceAndSnowTick() { this.currentIceAndSnowTick = this.random.nextInt(16); } // Gale - Airplane - optimize random calls in chunk ticking
+    private int currentIceAndSnowTick = 0;
+
+    protected void resetIceAndSnowTick() {
+        this.currentIceAndSnowTick = this.random.nextInt(16);
+    } // Gale - Airplane - optimize random calls in chunk ticking
 
     public void tickChunk(LevelChunk chunk, int randomTickSpeed) {
         ChunkPos chunkcoordintpair = chunk.getPos();
@@ -920,11 +878,11 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         }
 
         if (!this.paperConfig().environment.disableIceAndSnow && (this.currentIceAndSnowTick++ & 15) == 0) { // Paper - Option to disable ice and snow // Gale - Airplane - optimize random calls in chunk ticking - optimize further random ticking
-        for (int l = 0; l < randomTickSpeed; ++l) {
-            if (this.random.nextInt(48) == 0) {
-                this.tickPrecipitation(this.getBlockRandomPos(j, 0, k, 15));
+            for (int l = 0; l < randomTickSpeed; ++l) {
+                if (this.random.nextInt(48) == 0) {
+                    this.tickPrecipitation(this.getBlockRandomPos(j, 0, k, 15));
+                }
             }
-        }
         } // Paper - Option to disable ice and snow
 
         if (randomTickSpeed > 0) {
@@ -989,6 +947,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         // Paper start - Add methods to find targets for lightning strikes
         return this.findLightningTargetAround(pos, false);
     }
+
     public BlockPos findLightningTargetAround(BlockPos pos, boolean returnNullWhenNoTarget) {
         // Paper end - Add methods to find targets for lightning strikes
         BlockPos blockposition1 = this.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, pos);
@@ -1037,7 +996,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                     if (!org.purpurmc.purpur.PurpurConfig.sleepSkippingNight.equalsIgnoreCase("default")) {
                         ichatmutablecomponent = io.papermc.paper.adventure.PaperAdventure.asVanilla(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(org.purpurmc.purpur.PurpurConfig.sleepSkippingNight));
                     } else
-                    ichatmutablecomponent = Component.translatable("sleep.skipping_night");
+                        ichatmutablecomponent = Component.translatable("sleep.skipping_night");
                 } else {
                     if (org.purpurmc.purpur.PurpurConfig.sleepingPlayersPercent.isBlank()) {
                         return;
@@ -1047,8 +1006,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                                 net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.parsed("count", Integer.toString(this.sleepStatus.amountSleeping())),
                                 net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.parsed("total", Integer.toString(this.sleepStatus.sleepersNeeded(i)))));
                     } else
-                    // Purpur end
-                    ichatmutablecomponent = Component.translatable("sleep.players_sleeping", this.sleepStatus.amountSleeping(), this.sleepStatus.sleepersNeeded(i));
+                        // Purpur end
+                        ichatmutablecomponent = Component.translatable("sleep.players_sleeping", this.sleepStatus.amountSleeping(), this.sleepStatus.sleepersNeeded(i));
                 }
 
                 Iterator iterator = this.players.iterator();
@@ -1188,7 +1147,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     public void resetWeatherCycle() {
         // CraftBukkit start
         if (this.purpurConfig.rainStopsAfterSleep) // Purpur
-        this.serverLevelData.setRaining(false, org.bukkit.event.weather.WeatherChangeEvent.Cause.SLEEP); // Paper - Add cause to Weather/ThunderChangeEvents
+            this.serverLevelData.setRaining(false, org.bukkit.event.weather.WeatherChangeEvent.Cause.SLEEP); // Paper - Add cause to Weather/ThunderChangeEvents
         // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
         // Not that everyone ever manages to get the whole server to sleep at the same time....
         if (!this.serverLevelData.isRaining()) {
@@ -1196,7 +1155,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         }
         // CraftBukkit end
         if (this.purpurConfig.thunderStopsAfterSleep) // Purpur
-        this.serverLevelData.setThundering(false, org.bukkit.event.weather.ThunderChangeEvent.Cause.SLEEP); // Paper - Add cause to Weather/ThunderChangeEvents
+            this.serverLevelData.setThundering(false, org.bukkit.event.weather.ThunderChangeEvent.Cause.SLEEP); // Paper - Add cause to Weather/ThunderChangeEvents
         // CraftBukkit start
         // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
         // Not that everyone ever manages to get the whole server to sleep at the same time....
@@ -1218,7 +1177,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         }
         // Paper start - rewrite chunk system
         if ((++this.tickedBlocksOrFluids & 7L) != 0L) {
-            ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer)this.server).moonrise$executeMidTickTasks();
+            ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer) this.server).moonrise$executeMidTickTasks();
         }
         // Paper end - rewrite chunk system
 
@@ -1232,7 +1191,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         }
         // Paper start - rewrite chunk system
         if ((++this.tickedBlocksOrFluids & 7L) != 0L) {
-            ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer)this.server).moonrise$executeMidTickTasks();
+            ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer) this.server).moonrise$executeMidTickTasks();
         }
         // Paper end - rewrite chunk system
 
@@ -1244,7 +1203,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
     public static List<Entity> getCurrentlyTickingEntities() {
         Entity ticking = currentlyTickingEntity.get();
-        List<Entity> ret = java.util.Arrays.asList(ticking == null ? new Entity[0] : new Entity[] { ticking });
+        List<Entity> ret = java.util.Arrays.asList(ticking == null ? new Entity[0] : new Entity[]{ticking});
 
         return ret;
     }
@@ -1258,29 +1217,31 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 currentlyTickingEntity.lazySet(entity);
             }
             // Paper end - log detailed entity tick information
-        // Spigot start
+            // Spigot start
         /*if (!org.spigotmc.ActivationRange.checkIfActive(entity)) { // Paper - comment out - EAR 2, reimplement below
             entity.tickCount++;
             entity.inactiveTick();
             return;
         }*/ // Paper - comment out EAR 2
-        // Spigot end
-        final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
-        entity.setOldPosAndRot();
+            // Spigot end
+            final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
+            entity.setOldPosAndRot();
 
-        ++entity.tickCount;
-        if (isActive) { // Paper - EAR 2
-        entity.tick();
-        entity.postTick(); // CraftBukkit
-        } else { entity.inactiveTick(); } // Paper - EAR 2
-        Iterator iterator = entity.getPassengers().iterator();
+            ++entity.tickCount;
+            if (isActive) { // Paper - EAR 2
+                entity.tick();
+                entity.postTick(); // CraftBukkit
+            } else {
+                entity.inactiveTick();
+            } // Paper - EAR 2
+            Iterator iterator = entity.getPassengers().iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity1 = (Entity) iterator.next();
+            while (iterator.hasNext()) {
+                Entity entity1 = (Entity) iterator.next();
 
-            this.tickPassenger(entity, entity1);
-        }
-        // Paper start - log detailed entity tick information
+                this.tickPassenger(entity, entity1);
+            }
+            // Paper start - log detailed entity tick information
         } finally {
             if (currentlyTickingEntity.get() == entity) {
                 currentlyTickingEntity.lazySet(null);
@@ -1299,8 +1260,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
                 // Paper start - EAR 2
                 if (isActive) {
-                passenger.rideTick();
-                passenger.postTick(); // CraftBukkit
+                    passenger.rideTick();
+                    passenger.postTick(); // CraftBukkit
                 } else {
                     passenger.setDeltaMovement(Vec3.ZERO);
                     passenger.inactiveTick();
@@ -1334,22 +1295,22 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld()));
         }
 
-            if (doFull) {
-                this.saveLevelData(true);
-            }
+        if (doFull) {
+            this.saveLevelData(true);
+        }
 
-            // chunk autosave is already called by the ChunkSystem during unload processing (ChunkMap#processUnloads)
+        // chunk autosave is already called by the ChunkSystem during unload processing (ChunkMap#processUnloads)
 
-            // Copied from save()
-            // CraftBukkit start - moved from MinecraftServer.saveChunks
-            if (doFull) { // Paper
-                ServerLevel worldserver1 = this;
+        // Copied from save()
+        // CraftBukkit start - moved from MinecraftServer.saveChunks
+        if (doFull) { // Paper
+            ServerLevel worldserver1 = this;
 
-                this.serverLevelData.setWorldBorder(worldserver1.getWorldBorder().createSettings());
-                this.serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save(this.registryAccess()));
-                this.convertable.saveDataTag(this.server.registryAccess(), this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
-            }
-            // CraftBukkit end
+            this.serverLevelData.setWorldBorder(worldserver1.getWorldBorder().createSettings());
+            this.serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save(this.registryAccess()));
+            this.convertable.saveDataTag(this.server.registryAccess(), this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
+        }
+        // CraftBukkit end
     }
     // Paper end - Incremental chunk and player saving
 
@@ -1357,6 +1318,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         // Paper start - add close param
         this.save(progressListener, flush, savingDisabled, false);
     }
+
     public void save(@Nullable ProgressListener progressListener, boolean flush, boolean savingDisabled, boolean close) {
         // Paper end - add close param
         ServerChunkCache chunkproviderserver = this.getChunkSource();
@@ -1372,7 +1334,9 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 progressListener.progressStage(Component.translatable("menu.savingChunks"));
             }
 
-            if (!close) { chunkproviderserver.save(flush); } // Paper - add close param
+            if (!close) {
+                chunkproviderserver.save(flush);
+            } // Paper - add close param
             // Paper - rewrite chunk system
 
         }
@@ -1535,7 +1499,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             // WorldServer.LOGGER.warn("Tried to add entity {} but it was marked as removed already", EntityTypes.getKey(entity.getType())); // CraftBukkit
             return false;
         } else {
-            if (entity instanceof net.minecraft.world.entity.item.ItemEntity itemEntity && itemEntity.getItem().isEmpty()) return false; // Paper - Prevent empty items from being added
+            if (entity instanceof net.minecraft.world.entity.item.ItemEntity itemEntity && itemEntity.getItem().isEmpty())
+                return false; // Paper - Prevent empty items from being added
             // Paper start - capture all item additions to the world
             if (captureDrops != null && entity instanceof net.minecraft.world.entity.item.ItemEntity) {
                 captureDrops.add((net.minecraft.world.entity.item.ItemEntity) entity);
@@ -1632,7 +1597,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             float progressFloat = Mth.clamp(progress, 0, 10) / 10.0f;
             org.bukkit.craftbukkit.block.CraftBlock bukkitBlock = org.bukkit.craftbukkit.block.CraftBlock.at(this, pos);
             new io.papermc.paper.event.block.BlockBreakProgressUpdateEvent(bukkitBlock, progressFloat, entity.getBukkitEntity())
-                .callEvent();
+                    .callEvent();
         }
         // Paper end - Add BlockBreakProgressUpdateEvent
 
@@ -1708,53 +1673,55 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         this.getChunkSource().blockChanged(pos);
         this.pathTypesByPosCache.invalidate(pos);
         if (this.paperConfig().misc.updatePathfindingOnBlockUpdate) { // Paper - option to disable pathfinding updates
-        VoxelShape voxelshape = oldState.getCollisionShape(this, pos);
-        VoxelShape voxelshape1 = newState.getCollisionShape(this, pos);
+            VoxelShape voxelshape = oldState.getCollisionShape(this, pos);
+            VoxelShape voxelshape1 = newState.getCollisionShape(this, pos);
 
-        if (Shapes.joinIsNotEmpty(voxelshape, voxelshape1, BooleanOp.NOT_SAME)) {
-            List<PathNavigation> list = new ObjectArrayList();
-            Iterator iterator = this.navigatingMobs.iterator();
+            if (Shapes.joinIsNotEmpty(voxelshape, voxelshape1, BooleanOp.NOT_SAME)) {
+                List<PathNavigation> list = new ObjectArrayList();
+                Iterator iterator = this.navigatingMobs.iterator();
 
-            while (iterator.hasNext()) {
-                // CraftBukkit start - fix SPIGOT-6362
-                Mob entityinsentient;
-                try {
-                    entityinsentient = (Mob) iterator.next();
-                } catch (java.util.ConcurrentModificationException ex) {
-                    // This can happen because the pathfinder update below may trigger a chunk load, which in turn may cause more navigators to register
-                    // In this case we just run the update again across all the iterators as the chunk will then be loaded
-                    // As this is a relative edge case it is much faster than copying navigators (on either read or write)
-                    this.sendBlockUpdated(pos, oldState, newState, flags);
-                    return;
-                }
-                // CraftBukkit end
-                PathNavigation navigationabstract = entityinsentient.getNavigation();
+                while (iterator.hasNext()) {
+                    // CraftBukkit start - fix SPIGOT-6362
+                    Mob entityinsentient;
+                    try {
+                        entityinsentient = (Mob) iterator.next();
+                    } catch (java.util.ConcurrentModificationException ex) {
+                        // This can happen because the pathfinder update below may trigger a chunk load, which in turn may cause more navigators to register
+                        // In this case we just run the update again across all the iterators as the chunk will then be loaded
+                        // As this is a relative edge case it is much faster than copying navigators (on either read or write)
+                        this.sendBlockUpdated(pos, oldState, newState, flags);
+                        return;
+                    }
+                    // CraftBukkit end
+                    PathNavigation navigationabstract = entityinsentient.getNavigation();
 
-                if (navigationabstract.shouldRecomputePath(pos)) {
-                    list.add(navigationabstract);
+                    if (navigationabstract.shouldRecomputePath(pos)) {
+                        list.add(navigationabstract);
+                    }
                 }
-            }
 
-            try {
-                this.isUpdatingNavigations = true;
-                iterator = list.iterator();
+                try {
+                    this.isUpdatingNavigations = true;
+                    iterator = list.iterator();
 
-                while (iterator.hasNext()) {
-                    PathNavigation navigationabstract1 = (PathNavigation) iterator.next();
+                    while (iterator.hasNext()) {
+                        PathNavigation navigationabstract1 = (PathNavigation) iterator.next();
 
-                    navigationabstract1.recomputePath();
+                        navigationabstract1.recomputePath();
+                    }
+                } finally {
+                    this.isUpdatingNavigations = false;
                 }
-            } finally {
-                this.isUpdatingNavigations = false;
-            }
 
-        }
+            }
         } // Paper - option to disable pathfinding updates
     }
 
     @Override
     public void updateNeighborsAt(BlockPos pos, Block sourceBlock) {
-        if (captureBlockStates) { return; } // Paper - Cancel all physics during placement
+        if (captureBlockStates) {
+            return;
+        } // Paper - Cancel all physics during placement
         this.neighborUpdater.updateNeighborsAtExceptFromFacing(pos, sourceBlock, (Direction) null);
     }
 
@@ -1792,7 +1759,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     // Paper start - Allow explosions to damage source
     public Explosion explode(@Nullable Entity entity, @Nullable DamageSource damageSource, @Nullable ExplosionDamageCalculator behavior, double x, double y, double z, float power, boolean createFire, Level.ExplosionInteraction explosionSourceType, ParticleOptions particle, ParticleOptions emitterParticle, Holder<SoundEvent> soundEvent, java.util.function.Consumer<Explosion> configurator) {
         Explosion explosion = this.explode(entity, damageSource, behavior, x, y, z, power, createFire, explosionSourceType, false, particle, emitterParticle, soundEvent, configurator);
-    // Paper end - Allow explosions to damage source
+        // Paper end - Allow explosions to damage source
         // CraftBukkit start
         if (explosion.wasCanceled) {
             return explosion;
@@ -1878,6 +1845,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         // Paper start - Particle API
         return sendParticles(players, sender, t0, d0, d1, d2, i, d3, d4, d5, d6, force);
     }
+
     public <T extends ParticleOptions> int sendParticles(List<ServerPlayer> receivers, @Nullable ServerPlayer sender, T t0, double d0, double d1, double d2, int i, double d3, double d4, double d5, double d6, boolean force) {
         // Paper end - Particle API
         ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(t0, force, d0, d1, d2, (float) d3, (float) d4, (float) d5, (float) d6, i);
@@ -1886,7 +1854,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
         for (Player entityhuman : receivers) { // Paper - Particle API
             ServerPlayer entityplayer = (ServerPlayer) entityhuman; // Paper - Particle API
-            if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
+            if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity()))
+                continue; // CraftBukkit
 
             if (this.sendParticles(entityplayer, force, d0, d1, d2, packetplayoutworldparticles)) { // CraftBukkit
                 ++j;
@@ -1923,7 +1892,9 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         return (Entity) this.getEntities().get(id);
     }
 
-    /** @deprecated */
+    /**
+     * @deprecated
+     */
     @Deprecated
     @Nullable
     public Entity getEntityOrPart(int id) {
@@ -2344,6 +2315,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         return this.getEntities().getAll();
     }
 
+    @Override
     public String toString() {
         return "ServerLevel[" + this.serverLevelData.getLevelName() + "]";
     }
@@ -2406,6 +2378,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         // Paper start - add chunkpos param
         this.addLegacyChunkEntities(entities, null);
     }
+
     public void addLegacyChunkEntities(Stream<Entity> entities, ChunkPos chunkPos) {
         // Paper end - add chunkpos param
         this.moonrise$getEntityLookup().addLegacyChunkEntities(entities.toList(), chunkPos); // Paper - rewrite chunk system
@@ -2415,6 +2388,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         // Paper start - add chunkpos param
         this.addWorldGenChunkEntities(entities, null);
     }
+
     public void addWorldGenChunkEntities(Stream<Entity> entities, ChunkPos chunkPos) {
         // Paper end - add chunkpos param
         this.moonrise$getEntityLookup().addWorldGenChunkEntities(entities.toList(), chunkPos); // Paper - rewrite chunk system
@@ -2517,19 +2491,26 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
     private final class EntityCallbacks implements LevelCallback<Entity> {
 
-        EntityCallbacks() {}
+        EntityCallbacks() {
+        }
 
-        public void onCreated(Entity entity) {}
+        @Override
+        public void onCreated(Entity entity) {
+        }
 
+        @Override
         public void onDestroyed(Entity entity) {
             ServerLevel.this.getScoreboard().entityRemoved(entity);
         }
 
+        @Override
         public void onTickingStart(Entity entity) {
-            if (entity instanceof net.minecraft.world.entity.Marker && !paperConfig().entities.markers.tick) return; // Paper - Configurable marker ticking
+            if (entity instanceof net.minecraft.world.entity.Marker && !paperConfig().entities.markers.tick)
+                return; // Paper - Configurable marker ticking
             ServerLevel.this.entityTickList.add(entity);
         }
 
+        @Override
         public void onTickingEnd(Entity entity) {
             ServerLevel.this.entityTickList.remove(entity);
             // Paper start - Reset pearls when they stop being ticked
@@ -2540,6 +2521,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             // Paper end - Reset pearls when they stop being ticked
         }
 
+        @Override
         public void onTrackingStart(Entity entity) {
             org.spigotmc.AsyncCatcher.catchOp("entity register"); // Spigot
             // ServerLevel.this.getChunkSource().addEntity(entity); // Paper - ignore and warn about illegal addEntity calls instead of crashing server; moved down below valid=true
@@ -2590,30 +2572,26 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity(), ServerLevel.this.getWorld()).callEvent(); // Paper - fire while valid
         }
 
+        @Override
         public void onTrackingEnd(Entity entity) {
             org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
             // Spigot start
-            if ( entity instanceof Player )
-            {
-                com.google.common.collect.Streams.stream( ServerLevel.this.getServer().getAllLevels() ).map( ServerLevel::getDataStorage ).forEach( (worldData) ->
+            if (entity instanceof Player) {
+                com.google.common.collect.Streams.stream(ServerLevel.this.getServer().getAllLevels()).map(ServerLevel::getDataStorage).forEach((worldData) ->
                 {
-                    for (Object o : worldData.cache.values() )
-                    {
-                        if ( o instanceof MapItemSavedData )
-                        {
+                    for (Object o : worldData.cache.values()) {
+                        if (o instanceof MapItemSavedData) {
                             MapItemSavedData map = (MapItemSavedData) o;
-                            map.carriedByPlayers.remove( (Player) entity );
-                            for ( Iterator<MapItemSavedData.HoldingPlayer> iter = (Iterator<MapItemSavedData.HoldingPlayer>) map.carriedBy.iterator(); iter.hasNext(); )
-                            {
-                                if ( iter.next().player == entity )
-                                {
+                            map.carriedByPlayers.remove((Player) entity);
+                            for (Iterator<MapItemSavedData.HoldingPlayer> iter = (Iterator<MapItemSavedData.HoldingPlayer>) map.carriedBy.iterator(); iter.hasNext(); ) {
+                                if (iter.next().player == entity) {
                                     map.decorations.remove(entity.getName().getString()); // Paper
                                     iter.remove();
                                 }
                             }
                         }
                     }
-                } );
+                });
             }
             // Spigot end
             // Spigot Start
@@ -2672,6 +2650,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             new com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent(entity.getBukkitEntity(), ServerLevel.this.getWorld()).callEvent(); // Paper - fire while valid
         }
 
+        @Override
         public void onSectionChange(Entity entity) {
             entity.updateDynamicGameEventListener(DynamicGameEventListener::move);
         }
