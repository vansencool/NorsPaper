From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vansencool <vansencool@gmail.com>
Date: Wed, 22 Jan 2025 18:20:57 +0530
Subject: [PATCH] World command


diff --git a/src/main/java/net/vansen/norspaper/commands/WorldCommand.java b/src/main/java/net/vansen/norspaper/commands/WorldCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..2030babf6f4707f725b38456a8f09b0594bd7eb3
--- /dev/null
+++ b/src/main/java/net/vansen/norspaper/commands/WorldCommand.java
@@ -0,0 +1,94 @@
+package net.vansen.norspaper.commands;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.arguments.StringArgumentType;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.WorldCreator;
+import org.bukkit.generator.WorldInfo;
+
+public class WorldCommand {
+
+    public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
+        dispatcher.register(Commands.literal("world")
+                .requires(listener -> listener.hasPermission(2, "norspaper.command.world"))
+                .then(Commands.literal("tp")
+                        .then(Commands.argument("targets", EntityArgument.players())
+                                .then(Commands.argument("world", StringArgumentType.string())
+                                        .suggests((context, builder) -> {
+                                            Bukkit.getWorlds()
+                                                    .stream()
+                                                    .map(WorldInfo::getName)
+                                                    .forEachOrdered(builder::suggest);
+                                            return builder.buildFuture();
+                                        })
+                                        .executes(context -> {
+                                            var name = context.getArgument("world", String.class);
+                                            var world = Bukkit.getWorld(name);
+                                            if (world == null) {
+                                                return 0;
+                                            }
+                                            var targets = EntityArgument.getEntities(context, "targets");
+                                            for (Entity player : targets) {
+                                                player.getBukkitEntity().teleport(world.getSpawnLocation());
+                                            }
+                                            return 1;
+                                        }))))
+                .then(Commands.literal("create")
+                        .then(Commands.argument("world", StringArgumentType.string())
+                                .executes(context -> {
+                                    var name = context.getArgument("world", String.class);
+                                    if (Bukkit.getWorld(name) != null) {
+                                        return 0;
+                                    }
+                                    Bukkit.getScheduler()
+                                            .runTask(() -> {
+                                                try {
+                                                    Bukkit.createWorld(WorldCreator.name(name)
+                                                            .environment(World.Environment.NORMAL));
+                                                    context.getSource().getSender().sendRichMessage("<green>World created: '" + name + "'");
+                                                } catch (Exception e) {
+                                                    e.printStackTrace();
+                                                }
+                                            });
+                                    return 1;
+                                })))
+                .then(Commands.literal("delete")
+                        .then(Commands.argument("world", StringArgumentType.string())
+                                .suggests((context, builder) -> {
+                                    Bukkit.getWorlds()
+                                            .stream()
+                                            .map(WorldInfo::getName)
+                                            .forEachOrdered(builder::suggest);
+                                    return builder.buildFuture();
+                                })
+                                .executes(context -> {
+                                    var name = context.getArgument("world", String.class);
+                                    var world = Bukkit.getWorld(name);
+                                    if (world == null) {
+                                        return 0;
+                                    }
+                                    if (Bukkit.getWorlds().getFirst().getName().equals(name)) {
+                                        return 0;
+                                    }
+                                    if (world.getPlayerCount() > 0) {
+                                        world.getPlayers()
+                                                .forEach(p -> p.teleport(Bukkit.getWorlds().getFirst().getSpawnLocation()));
+                                    }
+                                    Bukkit.getScheduler()
+                                            .runTask(() -> {
+                                                try {
+                                                    Bukkit.unloadWorld(name, false);
+                                                    context.getSource().getSender().sendRichMessage("<green>World deleted: '" + name + "'");
+                                                } catch (Exception e) {
+                                                    e.printStackTrace();
+                                                }
+                                            });
+                                    return 1;
+                                }))));
+    }
+}
