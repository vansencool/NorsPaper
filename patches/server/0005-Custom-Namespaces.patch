From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vansencool <vansencool@gmail.com>
Date: Wed, 22 Jan 2025 00:58:03 +0530
Subject: [PATCH] Custom Namespaces


diff --git a/src/main/java/io/papermc/paper/command/brigadier/PaperCommands.java b/src/main/java/io/papermc/paper/command/brigadier/PaperCommands.java
index e0dad3b61402b309084a464bc3dfdb80043e69eb..d9a03ea2d2fe0b2c21779e408aa94ddec9c5672f 100644
--- a/src/main/java/io/papermc/paper/command/brigadier/PaperCommands.java
+++ b/src/main/java/io/papermc/paper/command/brigadier/PaperCommands.java
@@ -11,13 +11,6 @@ import io.papermc.paper.command.brigadier.bukkit.BukkitCommandNode;
 import io.papermc.paper.plugin.configuration.PluginMeta;
 import io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner;
 import io.papermc.paper.plugin.lifecycle.event.registrar.PaperRegistrar;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
 import net.minecraft.commands.CommandBuildContext;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
@@ -28,6 +21,8 @@ import org.checkerframework.framework.qual.DefaultQualifier;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Unmodifiable;
 
+import java.util.*;
+
 import static java.util.Objects.requireNonNull;
 
 @DefaultQualifier(NonNull.class)
@@ -87,6 +82,43 @@ public class PaperCommands implements Commands, PaperRegistrar<LifecycleEventOwn
         return this.register(requireNonNull(this.currentContext, "No lifecycle owner context is set").getPluginMeta(), node, description, aliases);
     }
 
+    // NorsPaper start - Better Commands API
+    @Override
+    public @Unmodifiable Set<String> register(LiteralCommandNode<CommandSourceStack> node, @org.jspecify.annotations.Nullable String description, Collection<String> aliases, String namespace) {
+        final boolean hasFlattenRedirectFlag = aliases.isEmpty();
+        final String literal = node.getLiteral();
+        final PluginMeta pluginMeta = requireNonNull(this.currentContext, "No lifecycle owner context is set").getPluginMeta();
+        final PluginCommandNode pluginLiteral = new PluginCommandNode(namespace + ":" + literal, pluginMeta, node, description);  // Treat the keyed version of the command as the root
+
+        final Set<String> registeredLabels = new HashSet<>(aliases.size() * 2 + 2);
+
+        if (this.registerIntoDispatcher(pluginLiteral, true)) {
+            registeredLabels.add(pluginLiteral.getLiteral());
+        }
+        if (this.registerRedirect(literal, pluginMeta, pluginLiteral, description, true, hasFlattenRedirectFlag)) { // Plugin commands should override vanilla commands
+            registeredLabels.add(literal);
+        }
+
+        // Add aliases
+        final List<String> registeredAliases = new ArrayList<>(aliases.size() * 2);
+        for (final String alias : aliases) {
+            if (this.registerRedirect(alias, pluginMeta, pluginLiteral, description, false, hasFlattenRedirectFlag)) {
+                registeredAliases.add(alias);
+            }
+            if (this.registerRedirect(namespace + ":" + alias, pluginMeta, pluginLiteral, description, false, hasFlattenRedirectFlag)) {
+                registeredAliases.add(namespace + ":" + alias);
+            }
+        }
+
+        if (!registeredAliases.isEmpty()) {
+            pluginLiteral.setAliases(registeredAliases);
+        }
+
+        registeredLabels.addAll(registeredAliases);
+        return registeredLabels.isEmpty() ? Collections.emptySet() : Collections.unmodifiableSet(registeredLabels);
+    }
+    // NorsPaper end - Better Commands API
+
     @Override
     public @Unmodifiable Set<String> register(final PluginMeta pluginMeta, final LiteralCommandNode<CommandSourceStack> node, final @Nullable String description, final Collection<String> aliases) {
         return this.registerWithFlags(pluginMeta, node, description, aliases, Set.of());
@@ -131,19 +163,19 @@ public class PaperCommands implements Commands, PaperRegistrar<LifecycleEventOwn
         final LiteralCommandNode<CommandSourceStack> redirect;
         if (redirectTo.getChildren().isEmpty() || hasFlattenRedirectFlag) {
             redirect = Commands.literal(aliasLiteral)
-                .executes(redirectTo.getCommand())
-                .requires(redirectTo.getRequirement())
-                .build();
+                    .executes(redirectTo.getCommand())
+                    .requires(redirectTo.getRequirement())
+                    .build();
 
             for (final CommandNode<CommandSourceStack> child : redirectTo.getChildren()) {
                 redirect.addChild(child);
             }
         } else {
             redirect = Commands.literal(aliasLiteral)
-                .executes(redirectTo.getCommand())
-                .redirect(redirectTo)
-                .requires(redirectTo.getRequirement())
-                .build();
+                    .executes(redirectTo.getCommand())
+                    .redirect(redirectTo)
+                    .requires(redirectTo.getRequirement())
+                    .build();
         }
 
         return this.registerIntoDispatcher(new PluginCommandNode(aliasLiteral, plugin, redirect, description), override);
@@ -173,31 +205,31 @@ public class PaperCommands implements Commands, PaperRegistrar<LifecycleEventOwn
     @Override
     public @Unmodifiable Set<String> register(final PluginMeta pluginMeta, final String label, final @Nullable String description, final Collection<String> aliases, final BasicCommand basicCommand) {
         final LiteralArgumentBuilder<CommandSourceStack> builder = Commands.literal(label)
-            .requires(stack -> basicCommand.canUse(stack.getSender()))
-            .then(
-                Commands.argument("args", StringArgumentType.greedyString())
-                    .suggests((context, suggestionsBuilder) -> {
-                        String[] args = StringUtils.split(suggestionsBuilder.getRemaining());
-                        if (suggestionsBuilder.getRemaining().endsWith(" ")) {
-                            // if there is trailing whitespace, we should add an empty argument to signify
-                            // that there may be more, but no characters have been typed yet
-                            args = ArrayUtils.add(args, "");
-                        }
-                        final SuggestionsBuilder offsetSuggestionsBuilder = suggestionsBuilder.createOffset(suggestionsBuilder.getInput().lastIndexOf(' ') + 1);
-
-                        final Collection<String> suggestions = basicCommand.suggest(context.getSource(), args);
-                        suggestions.forEach(offsetSuggestionsBuilder::suggest);
-                        return offsetSuggestionsBuilder.buildFuture();
-                    })
-                    .executes((stack) -> {
-                        basicCommand.execute(stack.getSource(), StringUtils.split(stack.getArgument("args", String.class), ' '));
-                        return com.mojang.brigadier.Command.SINGLE_SUCCESS;
-                    })
-            )
-            .executes((stack) -> {
-                basicCommand.execute(stack.getSource(), me.titaniumtown.ArrayConstants.emptyStringArray); // Gale - JettPack - reduce array allocations
-                return com.mojang.brigadier.Command.SINGLE_SUCCESS;
-            });
+                .requires(stack -> basicCommand.canUse(stack.getSender()))
+                .then(
+                        Commands.argument("args", StringArgumentType.greedyString())
+                                .suggests((context, suggestionsBuilder) -> {
+                                    String[] args = StringUtils.split(suggestionsBuilder.getRemaining());
+                                    if (suggestionsBuilder.getRemaining().endsWith(" ")) {
+                                        // if there is trailing whitespace, we should add an empty argument to signify
+                                        // that there may be more, but no characters have been typed yet
+                                        args = ArrayUtils.add(args, "");
+                                    }
+                                    final SuggestionsBuilder offsetSuggestionsBuilder = suggestionsBuilder.createOffset(suggestionsBuilder.getInput().lastIndexOf(' ') + 1);
+
+                                    final Collection<String> suggestions = basicCommand.suggest(context.getSource(), args);
+                                    suggestions.forEach(offsetSuggestionsBuilder::suggest);
+                                    return offsetSuggestionsBuilder.buildFuture();
+                                })
+                                .executes((stack) -> {
+                                    basicCommand.execute(stack.getSource(), StringUtils.split(stack.getArgument("args", String.class), ' '));
+                                    return com.mojang.brigadier.Command.SINGLE_SUCCESS;
+                                })
+                )
+                .executes((stack) -> {
+                    basicCommand.execute(stack.getSource(), me.titaniumtown.ArrayConstants.emptyStringArray); // Gale - JettPack - reduce array allocations
+                    return com.mojang.brigadier.Command.SINGLE_SUCCESS;
+                });
 
         return this.register(pluginMeta, builder.build(), description, aliases);
     }
