From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vansencool <vansencool@gmail.com>
Date: Sat, 25 Jan 2025 19:01:18 +0530
Subject: [PATCH] Fix UnsupportedOperationException in
 SpigotLoadOrderConfiguration.java


diff --git a/src/main/java/net/vansen/norspaper/collections/DynamicObjectArrayList.java b/src/main/java/net/vansen/norspaper/collections/DynamicObjectArrayList.java
index a83b900855f8c555f6c994c77d44fc9a41300e27..8836b7c68779ce1731a0923f6c84792c4359d4cc 100644
--- a/src/main/java/net/vansen/norspaper/collections/DynamicObjectArrayList.java
+++ b/src/main/java/net/vansen/norspaper/collections/DynamicObjectArrayList.java
@@ -228,6 +228,7 @@ public class DynamicObjectArrayList<T> extends ArrayList<T> implements Cloneable
     public Iterator<T> iterator() {
         return new Iterator<>() {
             private int cursor = 0;
+            private int lastReturned = -1; // track
 
             @Override
             public boolean hasNext() {
@@ -239,8 +240,32 @@ public class DynamicObjectArrayList<T> extends ArrayList<T> implements Cloneable
                 if (cursor >= size) {
                     throw new NoSuchElementException();
                 }
+                lastReturned = cursor;
                 return (T) elements[cursor++];
             }
+
+            @Override
+            public void remove() {
+                if (lastReturned == -1) {
+                    throw new IllegalStateException("remove() called before next()");
+                }
+                DynamicObjectArrayList.this.remove(lastReturned);
+                if (lastReturned < cursor) {
+                    cursor--;
+                }
+                lastReturned = -1;
+            }
+
+            @Override
+            public void forEachRemaining(Consumer<? super T> action) {
+                if (action == null) {
+                    throw new NullPointerException("Action cannot be null");
+                }
+                while (cursor < size) {
+                    action.accept((T) elements[cursor++]);
+                }
+                lastReturned = -1;
+            }
         };
     }
 
@@ -322,6 +347,17 @@ public class DynamicObjectArrayList<T> extends ArrayList<T> implements Cloneable
                 cursor++;
                 lastReturned = -1;
             }
+
+            @Override
+            public void forEachRemaining(Consumer<? super T> action) {
+                if (action == null) {
+                    throw new NullPointerException("Action cannot be null");
+                }
+                while (cursor < size) {
+                    action.accept((T) elements[cursor++]);
+                }
+                lastReturned = -1;
+            }
         };
     }
 
